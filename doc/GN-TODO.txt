(c) Copyright 201 Günter Neumann. All Rights Reserved.

To-do:

Current work, July, 2017:

How to switch off creating run directories?

-> 	switch off inside parser.early.run.ParseRun.ParseRun(Lexicon, String, Token[])
	call to 
	createRunDirectory();
		try {
			createLogger();
		} catch (IOException e) {
			
		}
-> if effective, use global property

log/main.log contains complete log of corpus

--> DONE

Try out reading in Lisp-format of grammars
-> works, if not package prefix is used & file extension is .lisp
Testing with 234-pt2.lisp
--> DONE

define simple test method for running single sentence with selected dictionary.
- cf.: parser.core.ParserTests.parser.core.TestCorpus
- traverses a file of sentences and calls parser with given lexicon
-> DONE

specified own GUI property file. run it like
parser.early.JTIGParser -gui -prop "/home/neumann/eclipse-workspace/JTIG/src/main/resources/default.gui.properties"


check how to speed up parsing.
- check current performance

-> DONE, see performanceTests.txt

HIERIX:

- define nonexhaustive lookup mode
	- update parser.lookup.Lookup.findlongestmatches(Token[], Lexicon)
	- needs to be defined such that it returns longest match substring
	
- understand how lexical lookup works

- check how to prune lexical lookup

- check whether parser is ok

- basically, how to make sure to compute n-best readings only

- linear parsing

Grammatik-Extraktion
	Erzeuge Testgrammatiken ohne Interpunktion und so, um größere Grammatiken testen zu können.
	Daher: Grammatikextraktion auch in java reimplementieren
	Bedeutet: 
		conll2penn & extraction oder direkt dependenz-artige LTIGs ?
	Integration von Uniform Dependency Grammars
	POS-Tagger

Output only lexical level for super tagging parsing.

Add non-exhaustive lexical lookup:
parser.lookup.Lookup.findlongestmatches(Token[], Lexicon)

Integration of GNTagger

Integrate tokenizers from GNTagger

Then, extract/load grammars

Output dependency trees in conll format
--> should be easy: use LTIG operations as edge labels
--> läßt sich dann auch linearisieren

Apply Deep learning

Wie Supertagging und almost parsing realisieren ?


<!-- the amount of unique items created, before parser stops the process -->
  <entry key="parser.core.bounduniqueitems">10000000</entry>

--> USED in parser.early.run.ParseRun.call()
  
  <!-- strategy for finding trees used in the parsing process -->
  <entry key="parser.lookup.exhaustive">true</entry>
  
  <!-- stop loop on first terminal element, which occurs -->
  <entry key="parser.stoponfirsttermitem">false</entry>
  

 <entry key="parser.core.amountderivations">infinity</entry>
 
 --> probably used to restrict number of parse trees extracted from a forest
 --> check: parser.output.forest.Forest.derivationAllowed()